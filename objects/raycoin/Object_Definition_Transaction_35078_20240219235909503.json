{"enableComments":false,"objectRelationships":[],"enableCategorization":false,"accountEntryRestrictedObjectFieldName":"","objectActions":[{"conditionExpression":"","objectActionExecutorKey":"groovy","errorMessage":{},"active":true,"description":"","label":{"en_US":"Validate Transaction"},"externalReferenceCode":"acb3e302-ab8d-7cb7-fc94-5589f1fb73d7","system":false,"objectActionTriggerKey":"onAfterAdd","name":"validateTransaction","parameters":{"script":"package com.liferay.raycoin.objects.transaction\n\nimport java.security.KeyFactory\nimport java.security.Signature\nimport java.security.spec.X509EncodedKeySpec\n\nimport javax.json.Json\nimport javax.json.JsonArray\nimport javax.json.JsonObject\n\nimport org.apache.http.HttpResponse\nimport org.apache.http.client.HttpClient\nimport org.apache.http.client.methods.HttpGet\nimport org.apache.http.impl.client.HttpClientBuilder\nimport org.apache.http.util.EntityUtils\n\nimport com.liferay.object.service.ObjectDefinitionLocalServiceUtil\nimport com.liferay.object.service.ObjectEntryLocalServiceUtil\nimport com.liferay.portal.kernel.service.ServiceContext\nimport com.liferay.portal.kernel.workflow.WorkflowConstants\n\n// if it is a reward transaction, doesn't validate\nif(fromAddress == 'none') {\n\treturn\n}\n\ndef userId = Long.valueOf(creator)\ndef obj = ObjectEntryLocalServiceUtil.getObjectEntry(id)\n\ndef transactionData = \"${fromAddress}${toAddress}${amount}\"\ndef transactionValidator = new TransactionValidator(obj.companyId, amount, fromAddress, transactionData, signature)\n\ntry {\n\n\t// first, set the signatureValid to false\n\tObjectEntryLocalServiceUtil.updateObjectEntry(userId, id, [signatureValid: false], new ServiceContext())\n\n\t// then, validate the signature\n\ttransactionValidator.validateSignature()\n\tprintln \"Transaction signature successfully validated\"\n\n\t// set the signatureValid to true\n\tObjectEntryLocalServiceUtil.updateObjectEntry(userId, id, [signatureValid: true], new ServiceContext())\n\t\n\t// validate if the wallet has enough funds for this transaction\n\ttransactionValidator.validateBalance()\n\n\t// set the transaction status to pending\n\ttransactionValidator.updateTransactionStatus(userId, id, WorkflowConstants.STATUS_PENDING)\n\t\n} catch (Exception e) {\n\t// as the signature wasn't validated or the wallet doesn't have funds, set the status to denied\n\ttransactionValidator.updateTransactionStatus(userId, id, WorkflowConstants.STATUS_DENIED)\n}\n\nclass TransactionValidator {\n\n\tlong companyId\n\tString fromAddress\n\tString transactionData\n\tString signature\n\tBigDecimal amount\n\n\tTransactionValidator(companyId, amount, fromAddress, transactionData, signature) {\n\t\tthis.companyId = companyId\n\t\tthis.amount = amount\n\t\tthis.fromAddress = fromAddress\n\t\tthis.transactionData = transactionData\n\t\tthis.signature = signature\n\t}\n\n\tvoid validateSignature() throws Exception {\n\t\tif (this.fromAddress == 'none') {\n\t\t\treturn\n\t\t}\n\n\t\tbyte[] signatureBytes = Base64.getDecoder().decode(this.signature)\n\n\t\tif (signatureBytes == null || signatureBytes.length == 0) {\n\t\t\tthrow new RuntimeException(\"No signature found in this transaction\")\n\t\t}\n\n\t\tdef keyFactory = KeyFactory.getInstance(\"EC\")\n\t\tdef publicKeySpec = new X509EncodedKeySpec(Base64.decoder.decode(this.fromAddress))\n\t\tdef publicKey = keyFactory.generatePublic(publicKeySpec)\n\n\t\tdef signatureInstance = Signature.getInstance(\"SHA256withECDSA\")\n\t\tsignatureInstance.initVerify(publicKey)\n\t\tsignatureInstance.update(this.transactionData.bytes)\n\n\t\tif(!signatureInstance.verify(signatureBytes)) {\n\t\t\tthrow new Exception(\"Signature validation failed\")\n\t\t}\n\t}\n\n\tvoid validateBalance() {\n\n\t\tdef blockChainObjDef = ObjectDefinitionLocalServiceUtil.fetchObjectDefinition(companyId, \"C_Blockchain\")\n\t\tdef blockChainObj = ObjectEntryLocalServiceUtil.getObjectEntries(0, blockChainObjDef.objectDefinitionId, 0, 1).get(0)\n\t\tdef blockchainUrl = blockChainObj.values.get(\"blockchainURL\")\n\n\t\tdef encodedFilter = URLEncoder.encode(\"address eq '${fromAddress}'\", \"UTF-8\")\n\t\tdef getUrl = \"${blockchainUrl}/o/c/walletbalances/?filter=${encodedFilter}\"\n\n\t\tHttpGet httpGet = new HttpGet(getUrl)\n\t\thttpGet.setHeader('Content-Type', 'application/json')\n\n\t\tHttpClient httpClient = HttpClientBuilder.create().build()\n\t\tHttpResponse getResponse = httpClient.execute(httpGet)\n\t\tString getResponseBody = EntityUtils.toString(getResponse.getEntity())\n\t\tJsonObject getResponseJson = Json.createReader(new StringReader(getResponseBody)).readObject()\n\n\t\tJsonArray walletBalancesJsonArray = getResponseJson.getJsonArray(\"items\")\n\t\tif(walletBalancesJsonArray.empty) {\n\t\t\tthrow new Exception(\"Wallet doesn't have enough funds\")\n\t\t} else {\n\t\t\tJsonObject walletBalance = walletBalancesJsonArray.getJsonObject(0)\n\t\t\tdef balance = new BigDecimal(walletBalance.getJsonNumber(\"balance\").toString())\n\t\t\tif(amount > balance) {\n\t\t\t\tthrow new Exception(\"Wallet doesn't have enough funds\")\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid updateTransactionStatus(userId, id, status) {\n\t\tThread.start {\n\t\t\tsleep(3000) // Sleep for 3 seconds\n\t\t\tObjectEntryLocalServiceUtil.updateStatus(userId, id, status, new ServiceContext())\n\t\t}\n\t}\n}\n\n"},"status":{"label_i18n":"Success","code":1,"label":"success"}},{"conditionExpression":"","objectActionExecutorKey":"groovy","errorMessage":{},"active":true,"description":"","label":{"en_US":"Trigger Blockchain"},"externalReferenceCode":"62d69634-f05a-9fd1-4ea1-f97f5928a895","system":false,"objectActionTriggerKey":"onAfterAdd","name":"triggerBlockchain","parameters":{"script":"package com.liferay.raycoin.objects.transaction\n\nimport org.apache.http.HttpResponse\nimport org.apache.http.HttpStatus\nimport org.apache.http.client.HttpClient\nimport org.apache.http.client.methods.HttpPut\nimport org.apache.http.impl.client.HttpClientBuilder\n\nimport com.liferay.object.service.ObjectDefinitionLocalServiceUtil\nimport com.liferay.object.service.ObjectEntryLocalServiceUtil\n\n// if it is a reward transaction, doesn't trigger mining\nif(fromAddress == 'none') return\n\ndef obj = ObjectEntryLocalServiceUtil.getObjectEntry(id)\n\ndef objDef = ObjectDefinitionLocalServiceUtil.fetchObjectDefinition(obj.companyId, \"C_Blockchain\")\n\ndef objectsEntries = ObjectEntryLocalServiceUtil.getObjectEntries(\n\t\t0, objDef.objectDefinitionId, 0, 1)\ndef objEntry = objectsEntries.get(0)\ndef authheader = objEntry.values.get(\"authorization\")\ndef blockchainUrl = objEntry.values.get(\"blockchainURL\")\ndef putUrl = \"${blockchainUrl}/o/c/blockchains/${objEntry.objectEntryId}/object-actions/minePendingTransactions\"\n\nThread.start {\n\tsleep(5000) // Sleep for 5 seconds\n\n\tHttpClient httpClient = HttpClientBuilder.create().build()\n\tHttpPut httpPut = new HttpPut(putUrl)\n\n\thttpPut.setHeader('Content-Type', 'application/json')\n\thttpPut.setHeader('Authorization', \"$authheader\")\n\n\tHttpResponse putResponse = httpClient.execute(httpPut)\n\tint putResponseStatus = putResponse.getStatusLine().getStatusCode()\n\n\tprintln \"PUT response status: ${putResponse.getStatusLine()}\"\n\n\tif (putResponseStatus == HttpStatus.SC_OK || putResponseStatus == HttpStatus.SC_NO_CONTENT) {\n\t\tprintln \"Successfully PUT to minePendingTransactions.\"\n\t} else {\n\t\tprintln \"Error in PUT minePendingTransactions. Error code: $putResponseStatus\"\n\t}\n}\n\n\n\n"},"status":{"label_i18n":"Success","code":1,"label":"success"}}],"enableLocalization":false,"accountEntryRestricted":false,"externalReferenceCode":"0e3a02fa-fd4c-a9bc-46a0-ecdfd742617c","objectFields":[{"indexed":false,"localized":false,"objectFieldSettings":[],"readOnly":"true","DBType":"String","label":{"en_US":"Author"},"type":"String","required":false,"externalReferenceCode":"fcc8ce2a-616d-ed0b-524e-d14e0029a876","indexedAsKeyword":false,"system":true,"indexedLanguageId":"","unique":false,"name":"creator","state":false,"businessType":"Text","readOnlyConditionExpression":""},{"indexed":false,"localized":false,"objectFieldSettings":[],"readOnly":"true","DBType":"Date","label":{"en_US":"Create Date"},"type":"Date","required":false,"externalReferenceCode":"fbc8a326-dfaf-f807-3618-ab1af56c8706","indexedAsKeyword":false,"system":true,"indexedLanguageId":"","unique":false,"name":"createDate","state":false,"businessType":"Date","readOnlyConditionExpression":""},{"indexed":false,"localized":false,"objectFieldSettings":[],"readOnly":"false","DBType":"String","label":{"en_US":"External Reference Code"},"type":"String","required":false,"externalReferenceCode":"1893dea3-1a92-e321-5f5a-6035068a4513","indexedAsKeyword":false,"system":true,"indexedLanguageId":"","unique":false,"name":"externalReferenceCode","state":false,"businessType":"Text","readOnlyConditionExpression":""},{"indexed":true,"localized":false,"objectFieldSettings":[],"readOnly":"true","DBType":"Long","label":{"en_US":"ID"},"type":"Long","required":false,"externalReferenceCode":"3d8c6c50-93c9-8188-2180-f33fbdb9eb0a","indexedAsKeyword":true,"system":true,"indexedLanguageId":"","unique":false,"name":"id","state":false,"businessType":"LongInteger","readOnlyConditionExpression":""},{"indexed":false,"localized":false,"objectFieldSettings":[],"readOnly":"true","DBType":"Date","label":{"en_US":"Modified Date"},"type":"Date","required":false,"externalReferenceCode":"c2ed3f00-0f62-c5a1-039b-a33329fa82c5","indexedAsKeyword":false,"system":true,"indexedLanguageId":"","unique":false,"name":"modifiedDate","state":false,"businessType":"Date","readOnlyConditionExpression":""},{"indexed":false,"localized":false,"objectFieldSettings":[],"readOnly":"true","DBType":"String","label":{"en_US":"Status"},"type":"String","required":false,"externalReferenceCode":"66851a36-84ec-b690-edac-b71007cfc471","indexedAsKeyword":false,"system":true,"indexedLanguageId":"","unique":false,"name":"status","state":false,"businessType":"Text","readOnlyConditionExpression":""},{"indexed":true,"localized":false,"objectFieldSettings":[{"name":"showCounter","value":false}],"readOnly":"false","DBType":"Clob","label":{"en_US":"From Address"},"type":"Clob","required":true,"externalReferenceCode":"4f2109fe-ef21-d9bf-cdb6-0f57aca99ae5","indexedAsKeyword":false,"system":false,"indexedLanguageId":"","unique":false,"name":"fromAddress","state":false,"businessType":"LongText","readOnlyConditionExpression":""},{"indexed":true,"localized":false,"objectFieldSettings":[{"name":"showCounter","value":false}],"readOnly":"false","DBType":"Clob","label":{"en_US":"To Address"},"type":"Clob","required":true,"externalReferenceCode":"6f0edcef-f2ab-0e8b-2b86-7173c4db505a","indexedAsKeyword":false,"system":false,"indexedLanguageId":"","unique":false,"name":"toAddress","state":false,"businessType":"LongText","readOnlyConditionExpression":""},{"indexed":true,"localized":false,"objectFieldSettings":[],"readOnly":"false","DBType":"BigDecimal","label":{"en_US":"Amount"},"type":"BigDecimal","required":true,"externalReferenceCode":"5e5b4041-4ff1-3112-1465-cf90f8fc1fd6","indexedAsKeyword":false,"system":false,"indexedLanguageId":"","unique":false,"name":"amount","state":false,"businessType":"PrecisionDecimal","readOnlyConditionExpression":""},{"indexed":true,"localized":false,"objectFieldSettings":[{"name":"showCounter","value":false}],"readOnly":"false","DBType":"Clob","label":{"en_US":"Signature"},"type":"Clob","required":true,"externalReferenceCode":"0324ad04-8053-7474-4c4b-df4c9e2706d4","indexedAsKeyword":false,"system":false,"indexedLanguageId":"","unique":false,"name":"signature","state":false,"businessType":"LongText","readOnlyConditionExpression":""},{"indexed":true,"localized":false,"objectFieldSettings":[],"readOnly":"false","DBType":"Boolean","label":{"en_US":"Signature Valid"},"type":"Boolean","required":false,"externalReferenceCode":"6d4a4c6a-ac81-2119-59ca-951dba4f0ab3","indexedAsKeyword":false,"system":false,"indexedLanguageId":"","unique":false,"name":"signatureValid","state":false,"businessType":"Boolean","readOnlyConditionExpression":""}],"restContextPath":"/o/c/transactions","scope":"company","portlet":true,"modifiable":true,"parameterRequired":false,"enableObjectEntryHistory":false,"titleObjectFieldName":"toAddress","objectValidationRules":[],"active":true,"defaultLanguageId":"en_US","label":{"en_US":"Transaction"},"panelCategoryKey":"applications_menu.applications.custom.apps","pluralLabel":{"en_US":"Transactions"},"objectLayouts":[],"system":false,"objectViews":[],"name":"Transaction","actions":{"permissions":{},"get":{},"update":{},"delete":{}},"status":{"label_i18n":"Approved","code":0,"label":"approved"}}